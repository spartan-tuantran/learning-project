package com.alext.crypto

import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.RepeatedTest
import org.junit.jupiter.api.Test

class PasswordManagerTest {

  private val manager = DefaultPasswordManager(10)

  @Test
  fun `Verify backward compatible with legacy password`() {
    // The raw password that is existing in legacy system.
    val password = "abc123"

    // The hashed password that is generated by legacy system.
    val hashedPassword = "$2a$10$8e/Y7X1jvnsN3fhsFrbnWO2jVYLEoBWFvyuRwDxi.LErC.J8ObkYq"

    // Make sure new password hashing work with old passwords.
    assertThat(manager.check(password, hashedPassword))
  }

  @RepeatedTest(5)
  fun `Generate a hash and verify password`() {
    val password = "abc"
    assertThat(manager.check(password, manager.hash(password))).isEqualTo(true)
    assertThat(manager.check(password, manager.hash(password))).isEqualTo(true)
    assertThat(manager.check("123", manager.hash(password))).isEqualTo(false)
    assertThat(manager.check("456", manager.hash(password))).isEqualTo(false)
  }

  @Test
  fun `Generate a random password`() {
    (1..5).forEach { n ->
      assertThat(manager.random(n).length).isEqualTo(n)
    }
  }

  @Test
  fun `Password with length less than 8 characters is invalid`() {
    assertThat(manager.isValidPassword("abc123")).isFalse
  }

  @Test
  fun `Password without any letters is invalid`() {
    assertThat(manager.isValidPassword("12345678")).isFalse
  }

  @Test
  fun `Password without any numbers is invalid`() {
    assertThat(manager.isValidPassword("abcdefgh")).isFalse
  }

  @Test
  fun `Password with length greater than or equal to 8 and contains letters, numbers, and special characters is valid`() {
    assertThat(manager.isValidPassword("Abc123!@#")).isTrue
  }

  @Test
  fun `Password with empty value is invalid`() {
    assertThat(manager.isValidPassword("")).isFalse
  }

  @Test
  fun `Password with leading or trailing spaces should be considered invalid`() {
    assertThat(manager.isValidPassword("  Abc12345@")).isFalse
    assertThat(manager.isValidPassword("Abc12345@  ")).isFalse
    assertThat(manager.isValidPassword(" Abc12345@ ")).isFalse
  }

  @Test
  fun `Password with only special characters should be considered invalid`() {
    assertThat(manager.isValidPassword("!@#$%^&*()_+")).isFalse
  }
}
